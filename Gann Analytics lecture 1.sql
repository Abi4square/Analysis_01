/*Lecture 1
Examples
*/

-- Example 1
SELECT SalesOrderID
,SalesPersonID
,OrderDate
,PurchaseOrderNumber
,DueDate
,TotalDue
FROM Sales.SalesOrderHeader


--Example 2 

SELECT
*
FROM Sales.SalesOrderHeader


-- Example 3 

SELECT TOP 100
SalesOrderID,
SalesPersonID,
OrderDate,
PurchaseOrderNumber,
DueDate,
TotalDue
FROM Sales.SalesOrderHeader
ORDER BY TotalDue DESC

--Using WHERE Clause to filter the rows selected from the table

--Example 4

SELECT  [SalesOrderID]
      ,[SalesOrderDetailID]
      ,[CarrierTrackingNumber]
      ,[OrderQty]
      ,[ProductID]
      ,[SpecialOfferID]
      ,[UnitPrice]
      ,[UnitPriceDiscount]
      ,[LineTotal]
      ,[rowguid]
      ,[ModifiedDate]
  FROM [AdventureWorks2019].[Sales].[SalesOrderDetail]
  WHERE SalesOrderID = 43659

 
 -- Example 5


 SELECT  [SalesOrderID]
      ,[SalesOrderDetailID]
      ,[CarrierTrackingNumber]
      ,[OrderQty]
      ,[ProductID]
      ,[SpecialOfferID]
      ,[UnitPrice]
      ,[UnitPriceDiscount]
      ,[LineTotal]
      ,[rowguid]
      ,[ModifiedDate]
  FROM [AdventureWorks2019].[Sales].[SalesOrderDetail]
  WHERE SalesOrderID = 43659 AND UnitPrice < 2000


--Example 6

SELECT [SalesOrderID]
      ,[RevisionNumber]
      ,[OrderDate]
      ,[DueDate]
      ,[ShipDate]
      ,[Status]
      ,[OnlineOrderFlag]
      ,[SalesOrderNumber]
      ,[PurchaseOrderNumber]
      ,[AccountNumber]
      ,[CustomerID]
      ,[SalesPersonID]
      ,[TerritoryID]
      ,[BillToAddressID]
      ,[ShipToAddressID]
      ,[ShipMethodID]
      ,[CreditCardID]
      ,[CreditCardApprovalCode]
      ,[CurrencyRateID]
      ,[SubTotal]
      ,[TaxAmt]
      ,[Freight]
      ,[TotalDue]
      ,[Comment]
      ,[rowguid]
      ,[ModifiedDate]
  FROM [AdventureWorks2019].[Sales].[SalesOrderHeader]
  WHERE year(OrderDate) = 2013

-- Example 7

  SELECT [SalesOrderID]
      ,[RevisionNumber]
      ,[OrderDate]
      ,[DueDate]
      ,[ShipDate]
      ,[Status]
      ,[OnlineOrderFlag]
      ,[SalesOrderNumber]
      ,[PurchaseOrderNumber]
      ,[AccountNumber]
      ,[CustomerID]
      ,[SalesPersonID]
      ,[TerritoryID]
      ,[BillToAddressID]
      ,[ShipToAddressID]
      ,[ShipMethodID]
      ,[CreditCardID]
      ,[CreditCardApprovalCode]
      ,[CurrencyRateID]
      ,[SubTotal]
      ,[TaxAmt]
      ,[Freight]
      ,[TotalDue]
      ,[Comment]
      ,[rowguid]
      ,[ModifiedDate]
  FROM [AdventureWorks2019].[Sales].[SalesOrderHeader]
  WHERE OrderDate BETWEEN '2013-01-01' AND '2013-12-01'

  
  --Aggregate Function

 -- Example 8 
  

SELECT MAX(OrderDate) AS Maxorderdate
		,MIN(OrderDate) AS Minorderdate
		,sum(subTotal) AS Total
    FROM [AdventureWorks2019].[Sales].[SalesOrderHeader]


--Example 9

	 SELECT SUM([SubTotal]) AS TotalSales
      ,SUM([TaxAmt]) AS TotalTaxamt
      ,SUM([Freight]) AS TotalFreight
      ,SUM([TotalDue]) AS TotalDue
     
  FROM [AdventureWorks2019].[Sales].[SalesOrderHeader]


  
  --GROUP BY

-- Example 10
   SELECT CustomerID
   ,sum(SubTotal) AS Total
   ,Count(customerID) AS Count
  FROM [AdventureWorks2019].[Sales].[SalesOrderHeader]
	  GROUP BY CustomerID
	  HAVING count(customerID) > 20
	  ORDER BY CustomerID

  --Example 11
   SELECT CustomerID,
      SUM([SubTotal]) AS TotalSales
      ,SUM([TaxAmt]) AS TotalTaxamt
      ,SUM([Freight]) AS TotalFreight
      ,SUM([TotalDue]) AS TotalDue
	  FROM [AdventureWorks2019].[Sales].[SalesOrderHeader]
	  GROUP BY CustomerID
	  ORDER BY SUM([TotalDue])
  

  -- Example 12
  
  SELECT  [SalesOrderID]
		,SUM([LineTotal]) AS Total
       FROM [AdventureWorks2019].[Sales].[SalesOrderDetail]
  --WHERE SalesOrderID = 43659
  GROUP BY SalesOrderID

  --EXAMPLE 13

  SELECT  [SalesOrderID]
      ,SUM([LineTotal]) AS Total
      FROM [AdventureWorks2019].[Sales].[SalesOrderDetail]
 -- where SalesOrderID = 43659
  GROUP BY SalesOrderID

  --HAVING

  --Example 14

  SELECT  [SalesOrderID]
       ,SUM([LineTotal])
      FROM [AdventureWorks2019].[Sales].[SalesOrderDetail]
	GROUP BY SalesOrderID
    HAVING SUM([LineTotal]) > 5000


 /* Logical Query process

 In most programing language  codes are process from the order they are wriiten from top to bottom unless the control flow dictates otherwise
 but in SQL, the first claused processed is the FROM clause.

 - Each Step in the logical query processing generates a virtual table that is used as the input to the next step or following steps
 - the virtual tables are not available to the caller.
 - Only the table generated by the final step is returned to the caller

 
 FROM - identify the tquery's source tables
 
 WHERE - filters rows from the table based on the predicate set. only return rows which the predicate evaluates to TRUE

 GROUP BY - groups the rows of the table based on the GROUPING set. the result is a row per group
			- hence all subsequent steps can only return scalar value per group

 HAVING - used for filtering GROUPED data . only groups that meets the Having criteria are returned

 SELECT - SEELECT THE COLUMNS TO RETUEN TO THE CALLER

 ORDER BY - Arrange the rows based on the order criteria. 
 
 TOP/ OFFSET - filters row based on the top or offset-etch criteria.


 */